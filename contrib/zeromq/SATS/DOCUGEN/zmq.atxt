(* ****** ****** *)

%{
implement srcfilename_get () = "../zmq.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/contrib_zeromq_zmq")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/contrib/zeromq/zmq\
")

(* ****** ****** *)

#declpreamble("\

#para('\

This package contains an API for programming <a
href="http://www.zeromq.org/">zeromq</a> in ATS.  ')

")#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("zmq_ctx_new")

(* ****** ****** *)

#declnamesynop("zmq_ctx_destroy")
#declnamesynop("zmq_ctx_destroy_exn")

(* ****** ****** *)

#declnamesynop("zmq_ctx_get")
#decldescrpt("\

If successful, this function returns the value of the context option
named by its second argument.")

#declfunretval("
The function returns a non-negative integer if successful, or it returns -1.
")

#declnamesynop("zmq_ctx_set")
#decldescrpt("\

If successful, this function sets the context option named to by its second
argument with the value given as its third argument. ")

#declfunretval("The function returns 0 if successful, or it returns -1.")

(* ****** ****** *)

#declnamesynop("zmq_socket")
#decldescrpt("\

This function creates a zeromq socket within the specified context and
returns an opaque handle to the newly created socket.  ")

#declfunretval("The function returns 0 if successful, or it returns -1.")

#declnamesynop("zmq_socket_exn")
#decldescrpt("\

This function is the exit version of #dyncode("zmq_socket").  After calling
#dyncode("zmq_socket"), it returns if there is no error, or it exits
abnormally.  ")

(* ****** ****** *)

#declnamesynop("zmq_getsockopt")
#decldescrpt("This function gets the value of a zmq-socket option.")
#declfunretval("The function returns 0 if successful, or it returns -1.")

#declnamesynop("zmq_getsockopt2")
#decldescrpt("\

This function does the same as #dyncode("zmq_getsockopt") but is given a
more accurate type. ")

#declfunretval("The function returns 0 if successful, or it returns -1.")

(* ****** ****** *)

#declnamesynop("zmq_setsockopt")
#decldescrpt("This function sets a zmq-socket option with a given value.")
#declfunretval("The function returns 0 if successful, or it returns -1.")

(* ****** ****** *)

#declnamesynop("zmq_bind")
#declnamesynop("zmq_bind_exn")
#decldescrpt("\

This function is the exit version of #dyncode("zmq_bind").  After
calling #dyncode("zmq_bind"), it returns if there is no error, or it
exits abnormally.  ")

(* ****** ****** *)

#declnamesynop("zmq_close")

(* ****** ****** *)

#declnamesynop("zmq_send")
#declnamesynop("zmq_recv")

(* ****** ****** *)

#declnamesynop("zmq_connect")
#decldescrpt("\

This function creates an outgoing connection from a given socket by
connecting the socket to a given endpoint and then accepts incoming
connections on that endpoint. ")

#declfunretval("The function returns 0 if successful, or it returns -1.")

#declnamesynop("zmq_connect_exn")
#decldescrpt("\

This function is the exit version of #dyncode("zmq_connect").  After
calling #dyncode("zmq_connect"), it returns if there is no error, or it
exits abnormally.  ")

(* ****** ****** *)

#declnamesynop("zmq_disconnect")
#decldescrpt("\

This function disconnects a given socket from a given endpoint.  ")

#declfunretval("The function returns 0 if successful, or it returns -1.")

#declnamesynop("zmq_disconnect_exn")
#decldescrpt("\

This function is the exit version of #dyncode("zmq_disconnect").  After
calling #dyncode("zmq_disconnect"), it returns if there is no error, or it
exits abnormally.  ")

(* ****** ****** *)

#declnamesynop("zmq_msg_size")
#declnamesynop("zmq_msg_data")

#declnamesynop("zmq_msg_more")
#decldescrpt("\

This function returns an integer indicating whether the given message is
part of a multi-part message or there are further parts to receive.\

")

(* ****** ****** *)

#declnamesynop("zmq_msg_get")
#decldescrpt("\

If successful, this function returns the value of the message property
referred to by its second argument.")

#declfunretval("
The function returns a non-negative integer if successful, or it returns -1.
")

#declnamesynop("zmq_msg_set")
#decldescrpt("\

If successful, this function sets the message property referred to by its
second argument with the value given as its third argument. ")

#declfunretval("The function returns 0 if successful, or it returns -1.")

(* ****** ****** *)

#declnamesynop("zmq_msg_init")

#declnamesynop("zmq_msg_init_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_msg_init").")

(* ****** ****** *)

#declnamesynop("zmq_msg_init_size")

#declnamesynop("zmq_msg_init_size_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_msg_init_size").")

(* ****** ****** *)

#declnamesynop("zmq_msg_init_data")

#declnamesynop("zmq_msg_init_data_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_msg_init_data").")

(* ****** ****** *)

#declnamesynop("zmq_msg_close")
#decldescrpt("\
This function releases the resource held in a zmq-message.
")
#declfunretval("The function returns 0 if successful, or it returns -1.")

#declnamesynop("zmq_msg_close_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_msg_close").")

(* ****** ****** *)

#declnamesynop("zmq_msg_copy")
#declnamesynop("zmq_msg_copy_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_msg_copy").")

(* ****** ****** *)

#declnamesynop("zmq_msg_move")
#declnamesynop("zmq_msg_move_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_msg_move").")

(* ****** ****** *)

#declnamesynop("zmq_msg_send")
#decldescrpt("\

This function sends a massage part from a given socket and returns the
number of bytes of the massage sent if successful or -1 instead.  ")

#declnamesynop("zmq_msg_send_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_msg_send").")
#declfunretval("\

The function returns a nonnegative integer indicating the size of the
sent message.")

(* ****** ****** *)

#declnamesynop("zmq_msg_recv")

#decldescrpt("\

This function recieves a massage part from a given socket and returns the
number of bytes of the received massage if successful or -1 instead.  ")

#declnamesynop("zmq_msg_recv_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_msg_recv").")
#declfunretval("\

The function returns a nonnegative integer indicating the size of the
received message.")

(* ****** ****** *)

#declnamesynop("zmq_term")
#decldescrpt("\

This function terminates a given zmq-context.  Note that it has been
#emph("deprecated"), and #dyncode("zmq_ctx_destroy") should be called
instead. ")

#declfunretval("The function returns 0 if successful, or it returns -1.")

#declnamesynop("zmq_term_exn")
#decldescrpt("This function is the exit version of #dyncode("zmq_term").")

(* ****** ****** *)

#declnamesynop("zmq_sendmsg")
#decldescrpt("\

This function is identical to #dyncode("zmq_msg_send") except its first two
arguments being given in the opposite order.  It has been
#emph("deprecated"). ")

#declnamesynop("zmq_recvmsg")
#decldescrpt("\

This function is identical to #dyncode("zmq_msg_recv") except its first two
arguments being given in the opposite order. It has been
#emph("deprecated"). ")

(* ****** ****** *)

(* end of [zmq.atxt] *)
